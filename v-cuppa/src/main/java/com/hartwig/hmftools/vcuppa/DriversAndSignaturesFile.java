package com.hartwig.hmftools.vcuppa;

import static com.hartwig.hmftools.common.utils.file.FileWriterUtils.createBufferedReader;

import java.io.IOException;
import java.io.UncheckedIOException;

import com.hartwig.hmftools.common.utils.file.DelimFileReader;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

// This class loads the sample cuppa features generated by com.hartwig.hmftools.cup.prep.CuppaDataPrep
// It also requires a cuppa features definitions file generated during vCUPPA training.
public class DriversAndSignaturesFile
{
    private static final Logger sLogger = LogManager.getLogger(DriversAndSignaturesFile.class);

    public static LinearFeatures load(String featureDefinitionPath, String sampleFeaturesPath)
    {
        LinearFeatures cuppaFeatures = new LinearFeatures();

        // first load all the keys ordering
        try(DelimFileReader reader = new DelimFileReader(createBufferedReader(featureDefinitionPath)))
        {
            reader.stream().forEach(row -> cuppaFeatures.addFeatureKey(row.get("Key"), row.getBoolean("Log1p")));
        }
        catch(IOException e)
        {
            throw new UncheckedIOException(e);
        }

        // then load sample specific features
        try(DelimFileReader reader = new DelimFileReader(createBufferedReader(sampleFeaturesPath)))
        {
            reader.stream().forEach(row -> cuppaFeatures.setFeatureValueIfPresent(row.get("Key"), row.getDouble("Value")));
        }
        catch(IOException e)
        {
            throw new UncheckedIOException(e);
        }
        return cuppaFeatures;
    }
}
